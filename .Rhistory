setwd("W:/Goknur_Unix/Projects/JVisvader/140912-BRCA1-2-Illumina-Microarray/140912-BRCA1-2-Illumina-Microarray")
options(digits=4, width=90)
library(limma)
targets <- read.delim("data/AllTargets.txt", sep=" ", header=TRUE)
targets
exprs_run1 <- read.ilmn(files="data/iltp2045/iltp2045_Sample_Probe_Profile.txt",
ctrlfiles="data/iltp2045/control probe profile.txt",
other.columns="Detection")
save(exprs_run1, file = "data/express2045_run1")
dim(exprs_run1)
load(file = "data/express2045_run1")
table(exprs_run1$genes$Status)
head(rownames(exprs_run1))
exprs_run2 <- read.ilmn(files="data/iltp1741/sample probe profile.txt",
other.columns="Detection")
save(exprs_run2, file = "data/express1741_run2")
dim(exprs_run2)
load(file = "data/express1741_run2")
head(rownames(exprs_run2))
exprs_run3 <- read.ilmn(files="data/iltp2070/iltp2070_Sample_Probe_Profile.txt",
ctrlfiles="data/iltp2070/TableControl-Control_Probe_Profile.txt",
other.columns="Detection")
save(exprs_run3, file = "data/express2070_run3")
dim(exprs_run3)
load(file = "data/express2070_run3")
table(exprs_run3$genes$Status)
head(rownames(exprs_run3))
exprs_run4 <- read.ilmn(files="data/iltp3421/iltp3421_Sample_Probe_Profile.txt",
ctrlfiles="data/iltp3421/Control Probe Profile.txt",
other.columns="Detection")
save(exprs_run4, file = "data/express3421_run4")
dim(exprs_run4)
load(file = "data/express3421_run4")
table(exprs_run4$genes$Status)
head(rownames(exprs_run4))
BackC_exprs_run1 <- nec(exprs_run1)
BackC_exprs_run2 <- nec(exprs_run2)
BackC_exprs_run3 <- nec(exprs_run3)
BackC_exprs_run4 <- nec(exprs_run4)
Annot <- read.delim("data/Annot/HumanWG-6_V3_0_R3_11282955_A.txt",row.names = NULL,skip = 8,
col.names = c('Species','Source','Search_Key','Transcript','ILMN_Gene',
'Source_Reference_ID','RefSeq_ID','Unigene_ID',
'Entrez_Gene_ID','GI','Accession','Symbol',
'Protein_Product','Probe_Id','Array_Address_Id',
'Probe_Type','Probe_Start','Probe_Sequence',
'Chromosome','Probe_Chr_Orientation','Probe_Coordinates',
'Cytoband','Definition','Ontology_Component',
'Ontology_Process','Ontology_Function','Synonyms',
'Obsolete_Probe_Id'))
SubAnnot <- Annot[ ,c("Search_Key", "Entrez_Gene_ID", "Accession", "Symbol","Synonyms",
"Probe_Id", "Array_Address_Id", "Chromosome", "Definition")]
m <- match(rownames(BackC_exprs_run2), SubAnnot$Probe_Id)
rownames(BackC_exprs_run2) <- SubAnnot$Array_Address_Id[m]
rownames(BackC_exprs_run2$genes) <- SubAnnot$Array_Address_Id[m]
BackC_exprs_run1 <- BackC_exprs_run1[BackC_exprs_run1$genes$Status=="regular", ]
BackC_exprs_run3 <- BackC_exprs_run3[BackC_exprs_run3$genes$Status=="regular", ]
BackC_exprs_run4 <- BackC_exprs_run4[BackC_exprs_run4$genes$Status=="regular", ]
BackC_exprs_run1 <- BackC_exprs_run1[order(rownames(BackC_exprs_run1)),]
o <- rownames(BackC_exprs_run1)
BackC_exprs_all <- cbind(BackC_exprs_run1, BackC_exprs_run2[o,], BackC_exprs_run3[o,],
BackC_exprs_run4[o,])
dim(BackC_exprs_all)
colnames(BackC_exprs_all) <- paste(targets$BRCA, targets$CellType, targets$Run,
targets$Ptnumber, sep=".")
m <- match(rownames(BackC_exprs_all$genes), SubAnnot$Array_Address_Id)
BackC_exprs_all$genes <- data.frame(BackC_exprs_all$genes, SubAnnot[m,]) [,c(-2)]
Annot.ncbi <- read.delim("data/Annot/Homo_sapiens.gene_info.txt",sep="\t",header=F,
stringsAsFactors=F, skip=1)
names(Annot.ncbi) = c("tax_id","GeneID","Symbol","LocusTag","Synonyms",
"dbXrefs","chromosome","map.location","description",
"type","symbol.from.nomenclature","full.name.from.nomenclature",
"nomenclature.status","other.designations","modification.date")
GENES <- BackC_exprs_all$genes
matches <- match(GENES$Entrez_Gene_ID, Annot.ncbi[,"GeneID"])
table(!is.na(matches))
library(org.Hs.eg.db)
Latest_Symbol <- alias2SymbolTable(GENES$Symbol, species = "Hs")
GENES <- data.frame(GENES[,1:5],Latest_Symbol,GENES[,6:10])
matches2 <- match(GENES$Latest_Symbol, Annot.ncbi[,"Symbol"])
matches[is.na(matches)] <- matches2[is.na(matches)]
table(!is.na(matches))
matchedAnnot <- Annot.ncbi[matches, ]
BackC_exprs_all$genes <- cbind(GENES, matchedAnnot[,c("GeneID","Symbol","Synonyms",
"chromosome","description","other.designations")])
newColms <- (dim(GENES)[2]+1):(dim(GENES)[2]+6)
colnames(BackC_exprs_all$genes)[newColms] <- paste("NCBI",
colnames(BackC_exprs_all$genes)[newColms],sep=".")
exprs.withAnnot <- BackC_exprs_all[!is.na(BackC_exprs_all$genes$NCBI.Symbol),]
exprs.noAnnot <- BackC_exprs_all[is.na(BackC_exprs_all$genes$NCBI.Symbol),]
BackC_exprs_all <- rbind(exprs.withAnnot, exprs.noAnnot)
par(mfrow=c(1,1), mar=c(16, 4.1, 2.1, 2.1))
boxplot(log2(BackC_exprs_all$E), range=0, ylab="log2 intensity", las=3)
plotDensities(BackC_exprs_all, log=TRUE, legend=FALSE) # using limma, cannot control legend
#library(affy)
#plotDensity(log2(BackC_exprs_all$E), xlab="log2(Intensity)")
normLog_exprs <- normalizeBetweenArrays(BackC_exprs_all, method="quantile")
#library(affy)
#plotDensity(normLog_exprs$E, xlab="log2(Intensity)")
cell_vec <- as.numeric(as.factor(targets$CellType))
col <- c("red","black","green","blue")
col_vec <- col[cell_vec]
labels <- paste(targets$BRCA, targets$CellType, targets$Run, sep=".")
plotMDS(normLog_exprs, labels=labels, col=col_vec)
Runs <- unique(targets$Run)
Colors <- c("red", "forestgreen", "gold4", "blue")
col_vec <- c(rep("red",24), rep("forestgreen",12), rep("gold4",10), rep("blue",24))
plotMDS(normLog_exprs, labels=targets$CellType, col=col_vec)
legend("topleft", legend = Runs, pch = rep(19,4), col = Colors, cex = 1)
BRCA <- unique(targets$BRCA)
ColorsBRCA <- c("red", "orange", "blue", "darkgreen")
BRCA_vec <- as.numeric(as.factor(targets$BRCA))
col_vec2 <- ColorsBRCA[BRCA_vec]
plotMDS(normLog_exprs, labels=targets$CellType, col=col_vec2)
legend("topleft", legend = BRCA, pch = rep(19,4), col = ColorsBRCA, cex = 1)
save(normLog_exprs, file = "data/All_BackCorrect_Normalized_Expressions")
normLog_exprs
load("data/All_BackCorrect_Normalized_Expressions")
table(targets$CellType, targets$BRCA)
genoType <- unique(targets$BRCA)
for(i in 1:length(genoType)) {
Sub <- normLog_exprs[ ,targets$BRCA == genoType[i]]
cellTypes_ID <- (targets[targets$BRCA == genoType[i], ])$CellType
Ave <- avearrays(Sub, ID = cellTypes_ID, weights=NULL)
Ave <- Ave[,c("MS","LP","ML","stroma")] #re order
d <- data.frame(Entrez_Gene_ID = Ave$genes$Entrez_Gene_ID,
Probe_Id = Ave$genes$Probe_Id,
Array_Address_Id = Ave$genes$Array_Address_Id,
Symbol = Ave$genes$NCBI.Symbol,
Synonyms = Ave$genes$NCBI.Synonyms,
Chromosome = Ave$genes$NCBI.chromosome,
Description = Ave$genes$NCBI.description,
Ave$E)
fileName <- paste("ExpressionSummaries/", genoType[i], ".csv",sep="")
write.csv(d, file=fileName, row.names = FALSE)
}
colnames(normLog_exprs)
table(duplicated(colnames(normLog_exprs)))
which(duplicated(colnames(normLog_exprs)))
normLog_exprs.unq <- avearrays(normLog_exprs, ID=colnames(normLog_exprs), weights=NULL)
dim(normLog_exprs.unq)
colnames(normLog_exprs.unq)
targets.unq <- targets[-62,]
CellGenoType <- factor(paste(targets.unq$CellType, targets.unq$BRCA, sep="."))
design <- model.matrix(~0+CellGenoType)
colnames(design) <- unlist(strsplit(colnames(design),"CellGenoType"))[c(2:17)*2-2]
normLog_exprs_bc <- normLog_exprs.unq
batch <- targets.unq$Run
normLog_exprs_bc$E <- removeBatchEffect(normLog_exprs_bc, batch=batch, design=design)
Runs <- unique(targets.unq$Run)
Colors <- c("red", "forestgreen", "gold4", "blue")
run.c <- table(targets.unq$Run)
col_vec <- c(rep("red",run.c[1]), rep("forestgreen",run.c[2]), rep("gold4",run.c[3]),
rep("blue",run.c[4]))
plotMDS(normLog_exprs.unq, labels=targets.unq$CellType, col=col_vec)
legend("bottomright", legend = Runs, pch = rep(19,4), col = Colors, cex = 1)
table(targets.unq$CellType, targets.unq$BRCA)
dim(normLog_exprs.unq)
exprssd <- rowSums((1-normLog_exprs.unq$other$Detection) < 0.01) >= 1
exprs.filt <- normLog_exprs.unq[exprssd, ]
dim(exprs.filt)
exprssd2 <- rowMeans(exprs.filt$E) > 4.7
exprs.filt <- exprs.filt[exprssd2, ]
dim(exprs.filt)
hasAnnot <- exprs.filt$genes$Symbol!=""
exprs.filt <- exprs.filt[hasAnnot, ]
dim(exprs.filt)
save(exprs.filt, file = "data/FilteredNormalizedExpress_All")
CellType <- factor(targets.unq$CellType)
design0 <- model.matrix(~0+CellType)
colnames(design0) <- unlist(strsplit(colnames(design0),"CellType"))[c(1:4)*2]
load("data/FilteredNormalizedExpress_All")
aW <- arrayWeights(exprs.filt, design0)
barplot(aW, main="Array Weights")
aW
CellGenoType <- factor(paste(targets.unq$CellType, targets.unq$BRCA, sep="."))
Run <- targets.unq$Run
design <- model.matrix(~0+CellGenoType+Run)
colnames(design) <- c(unlist(strsplit(colnames(design),"CellGenoType"))[c(1:16)*2],
"run2", "run3", "run4")
dupCor.patient <- duplicateCorrelation(exprs.filt, design,
block=targets.unq$Ptnumber,
weights=aW)
dupCor.patient$consensus.correlation
dupCor.chip <- duplicateCorrelation(exprs.filt, design,
block=targets.unq$Chip)
dupCor.chip$consensus.correlation
fit <- lmFit(exprs.filt, design, block=targets.unq$Ptnumber,
correlation=dupCor.patient$consensus.correlation,
weights=aW)
fitTemp <- eBayes(fit, trend=TRUE, robust=TRUE)
summary(decideTests(fitTemp[,17:19], method="global"))
contrasts <- makeContrasts(BRCA1vsBRCA2.MS = MS.BRCA1 - MS.BRCA2,
BRCA1vsBRCA2.LP = LP.BRCA1 - LP.BRCA2,
BRCA1vsBRCA2.ML = ML.BRCA1 - ML.BRCA2,
BRCA1vsBRCA2.stroma = stroma.BRCA1 - stroma.BRCA2,
BRCA1vsNORMAL.MS = MS.BRCA1 - MS.normal,
BRCA1vsNORMAL.LP = LP.BRCA1 - LP.normal,
BRCA1vsNORMAL.ML = ML.BRCA1 - ML.normal,
BRCA1vsNORMAL.stroma = stroma.BRCA1 - stroma.normal,
BRCA2vsNORMAL.MS = MS.BRCA2 - MS.normal,
BRCA2vsNORMAL.LP = LP.BRCA2 - LP.normal,
BRCA2vsNORMAL.ML = ML.BRCA2 - ML.normal,
BRCA2vsNORMAL.stroma = stroma.BRCA2 - stroma.normal,
levels=design)
contrasts <- contrasts[,
c("BRCA1vsBRCA2.MS","BRCA1vsBRCA2.LP","BRCA1vsBRCA2.ML","BRCA1vsBRCA2.stroma",
"BRCA1vsNORMAL.MS","BRCA1vsNORMAL.LP","BRCA1vsNORMAL.ML","BRCA1vsNORMAL.stroma",
"BRCA2vsNORMAL.MS","BRCA2vsNORMAL.LP","BRCA2vsNORMAL.ML","BRCA2vsNORMAL.stroma")]
fit2 <- contrasts.fit(fit, contrasts)
fit2 <- eBayes(fit2, trend=TRUE, robust=TRUE) # robust=TRUE
summary(fit2$df.prior)
plotSA(fit2)
Sum.dT <- summary(decideTests(fit2, method="global"))
rownames(Sum.dT) <- c("down-regulated","not-sig", "up-regulated")
Sum.dT[,colnames(contrasts)]
Sum.dT <- summary(decideTests(fit2, method="separate"))
rownames(Sum.dT) <- c("down-regulated","not-sig", "up-regulated")
Sum.dT[,colnames(contrasts)]
dT <- apply(decideTests(fit2, method="separate"), 2, function(x) factor(x, levels=c(-1,0,1),
labels=c("down-regulated","not-sig", "up-regulated")) )
DE.1 <- topTreat(fit2, coef="BRCA2vsNORMAL.LP", n=Inf)
DE.1[1:10, c(5,8:9,12,13,15,18:23)]
write.csv(DE.1,
file="Results-SpreadSheets/DE_results_1_for_BRCA2_vs_NORMAL_inCellLine_LP.csv",
row.names=FALSE)
limma::plotMA(fit2, coef=10, status=dT[,10], values=c("not-sig","down-regulated","up-regulated"),
col=c("black","blue","red"), cex=c(0.3,1,1),
main="BRCA2 over NORMAL in LP")
abline(h=0,col="darkgrey")
DE.2 <- topTreat(fit2, coef="BRCA2vsNORMAL.ML", n=Inf)
DE.2[1:10, c(5,8:9,12,13,15,18:23)]
write.csv(DE.2,
file="Results-SpreadSheets/DE_results_2_for_BRCA2_vs_NORMAL_inCellLine_ML.csv",
row.names=FALSE)
limma::plotMA(fit2, coef=11, status=dT[,11], values=c("not-sig","down-regulated","up-regulated"),
col=c("black","blue","red"), cex=c(0.3,1,1),
main="BRCA2 over NORMAL in ML")
abline(h=0,col="darkgrey")
DE.3 <- topTreat(fit2, coef="BRCA1vsBRCA2.LP", n=Inf)
DE.3[1:10, c(5,8:9,12,13,15,18:23)]
write.csv(DE.3,
file="Results-SpreadSheets/DE_results_3_for_BRCA2_vs_BRCA1_inCellLine_LP.csv",
row.names=FALSE)
limma::plotMA(fit2, coef=2, status=dT[,2], values=c("not-sig","down-regulated","up-regulated"),
col=c("black","blue","red"), cex=c(0.3,1,1),
main="BRCA1 over BRCA2 in LP")
abline(h=0,col="darkgrey")
DE.4 <- topTreat(fit2, coef="BRCA1vsBRCA2.ML", n=Inf)
DE.4[1:10, c(5,8:9,12,13,15,18:23)]
write.csv(DE.4,
file="Results-SpreadSheets/DE_results_4_for_BRCA2_vs_BRCA1_inCellLine_ML.csv",
row.names=FALSE)
limma::plotMA(fit2, coef=3, status=dT[,3], values=c("not-sig","down-regulated","up-regulated"),
col=c("black","blue","red"), cex=c(0.3,1,1),
main="BRCA1 over BRCA2 in ML")
abline(h=0,col="darkgrey")
library(org.Hs.eg.db)
library(GO.db)
GO.name <- c("cell proliferation", "DNA repair", "apoptotic process",
"cell adhesion", "secretion", "tight junction")
indexList <- list()
for(i in 1:length(GO.name)){
GOid <- GOID( GOTERM[ Term(GOTERM) == GO.name[i]])
allegs <- get(GOid, org.Hs.egGO2ALLEGS)
GOgenes <- unlist(mget(allegs,org.Hs.egSYMBOL))
index <- exprs.filt$genes$NCBI.GeneID %in% unique(names(GOgenes))
# multiple matching due to multiple probes for the same gene
indexList[[paste(GOid,GO.name[i],sep=": ")]] <- index
}
mroast(exprs.filt, indexList, design, contrast=contrasts[,10], nrot=99999,
block=targets.unq$Ptnumber, correlation=dupCor.patient$consensus.correlation,
array.weights=aW, sort="none")
for(i in 1:length(GO.name)){
barcodeplot(fit2$t[,10], index=indexList[[i]], col.bars="gray",
main=paste("'",GO.name[i],"'"," genes in the contrast BRCA2 vs NORMAL in LP",
sep=""))
}
mroast(exprs.filt, indexList, design, contrast=contrasts[,11], nrot=99999,
block=targets.unq$Ptnumber, correlation=dupCor.patient$consensus.correlation,
array.weights=aW, sort="none")
for(i in 1:length(GO.name)){
barcodeplot(fit2$t[,11], index=indexList[[i]], col.bars="gray",
main=paste("'",GO.name[i],"'"," genes in the contrast BRCA2 vs NORMAL in ML",
sep=""))
}
mroast(exprs.filt, indexList, design, contrast=contrasts[,2], nrot=99999,
block=targets.unq$Ptnumber, correlation=dupCor.patient$consensus.correlation,
array.weights=aW, sort="none")
for(i in 1:length(GO.name)){
barcodeplot(fit2$t[,2], index=indexList[[i]], col.bars="gray",
main=paste("'",GO.name[i],"'"," genes in the contrast BRCA1 vs BRCA2 in LP",
sep=""))
}
mroast(exprs.filt, indexList, design, contrast=contrasts[,3], nrot=99999,
block=targets.unq$Ptnumber, correlation=dupCor.patient$consensus.correlation,
array.weights=aW, sort="none")
for(i in 1:length(GO.name)){
barcodeplot(fit2$t[,3], index=indexList[[i]], col.bars="gray",
main=paste("'",GO.name[i],"'"," genes in the contrast BRCA1 vs BRCA2 in ML",
sep=""))
}
sessionInfo()
load("W:/Goknur_Unix/Projects/JVisvader/ENolan/Data_Analysis/Analysis-2011-DiWu/Reanalysis-2015-Waruni/140912-BRCA1-2-Illumina-Microarray/dummy.RData")
y <- matrix(rnorm(400),100,4)
y <- t(t(y)*c(1,10,1,10))
head(y)
y <- matrix(rnorm(400),100,4)
y <- t(t(y)*c(1,10,1,10))
head(y)
y <- matrix(rnorm(400),100,4)
head(y)
y <- t(t(y)*c(1,10,1,10))
head(y)
group <- factor(c(1,1,0,0))
design <- model.matrix(~group)
args(fry.deafult)
library(limma)
source("~/SmythLab/FRY/Source_codes/geneset-fry-effects.R")
source("~/SmythLab/FRY/Simulations/lmEffects.R")
args(fry.deafult)
args(fry.default)
fry(y,design,array.weights=c(1,0.01,1,0.01))
group <- factor(c(1,1,0,0))
design <- model.matrix(~group)
args(fry.default)
fry(y,design,array.weights=c(1,0.01,1,0.01))
group <- factor(c(1,1,0,0))
design <- model.matrix(~group)
args(fry.default)
fry(y,design,array.weights=c(1,0.01,1,0.01))
fry(y,design=design,array.weights=c(1,0.01,1,0.01))
design <- model.matrix(~group)
fry(y,design=design)
fry(y,design=design,array.weights=c(1,0.01,1,0.01))
.matvec <- limma:::.matvec
fry(y,design=design,array.weights=c(1,0.01,1,0.01))
index <- list()
i <- 1:5
for(s in 1:(ngenes/5)) {
index[[s]] <- i
i <- i+5
}
index <- list()
i <- 1:5
for(s in 1:(ngenes/5)) {
index[[s]] <- i
i <- i+5
}
ngenes <- 1000
nsamples <- 4
index <- list()
i <- 1:5
for(s in 1:(ngenes/5)) {
index[[s]] <- i
i <- i+5
}
nsets <- length(index)
for (s in 1:2000) {
y[index[[s]],3:4] <- y[index[[s]],3:4] + 2
}
Truth <- rep(c(1,0),c(2000,nsets-2000))
f.n <- fry(y,index=index,design=design,standardize="none",sort="n")
f.r <- fry(y,index=index,design=design,standardize="r",sort="n")
fry(y,design=design,array.weights=c(1,0.01,1,0.01))
fry(y,design=design,array.weights=c(1,0.01,1,0.01),standardize = "n")
fry(y,design=design,array.weights=c(1,0.01,1,0.01),standardize = "p")
fry(y,design=design,array.weights=c(1,0.01,1,0.01),standardize = "r")
ngenes <- 1000
nsamples <- 4
y <- matrix(rnorm(ngenes*nsamples),ngenes,nsamples)
y <- t(t(y)*c(1,10,1,10))
head(y)
group <- factor(c(1,1,0,0))
design <- model.matrix(~group)
args(fry.default)
fry(y,design=design,array.weights=c(1,0.01,1,0.01),standardize = "r")
index
for (s in 1:2000) {
y[index[[s]],3:4] <- y[index[[s]],3:4] + 2
}
ngenes <- 100000
y <- matrix(rnorm(ngenes*4),ngenes,4)
design <- cbind(1,c(0,0,1,1))
s0 <- 0.3
d0 <- 4
sigma2 <- s0^2 * d0 / rchisq(ngenes, df=d0)
y <- y*sqrt(sigma2)
index <- list()
i <- 1:5
for(s in 1:(ngenes/5)) {
index[[s]] <- i
i <- i+5
}
nsets <- length(index)
nsets
Truth <- rep(c(1,0),c(2000,nsets-2000))
sample(nsets,2000)
ngenes <- 100000
y <- matrix(rnorm(ngenes*6),ngenes,6)
design <- cbind(1,c(0,0,0,1,1,1))
s0 <- 0.3
d0 <- 4
sigma2 <- s0^2 * d0 / rchisq(ngenes, df=d0)
y <- y*sqrt(sigma2)
nsets <- ngenes/5
Truth <- rep(0,nsets)
Truth[sample(nsets,2000)] <- 1
index <- list()
i <- 1:5
for(s in 1:nsets) {
index[[s]] <- i
if(Truth[s]) y[i,4:6] <- y[i,4:6] + 2
i <- i+5
}
f.n <- fry(y,index=index,design=design,standardize="none",sort="n")
f.r <- fry(y,index=index,design=design,standardize="r",sort="n")
f.p <- fry(y,index=index,design=design,standardize="p",sort="n")
ro <- mroast(y,index=index,design=design,nrot=999,sort="n")
p <- cbind(n=f.n$PValue,r=f.r$PValue,p=f.p$PValue,ro=ro$PValue)
colMeans(p<0.05)
colMeans(p<0.01)
colMeans(p<0.001)
colMeans(p<0.0001)
o <- order(f.n$PValue)
NFD.n <- cumsum(1-Truth[o])
o <- order(f.r$PValue)
NFD.r <- cumsum(1-Truth[o])
o <- order(f.p$PValue)
NFD.p <- cumsum(1-Truth[o])
o <- order(ro$PValue)
NFD.ro <- cumsum(1-Truth[o])
n <- 2000
m <- max(NFD.n[n],NFD.r[n],NFD.p[n])
plot(1:n,seq(0,m,len=n),type="n",xlab="Number selected",ylab="Number of false discoveries")
lines(1:n,NFD.n[1:n],col="black")
lines(1:n,NFD.r[1:n],col="blue")
lines(1:n,NFD.p[1:n],col="red")
lines(1:n,NFD.ro[1:n],col="black",lty=2)
legend("topleft",lty=c(1,1,1,2),col=c("black","blue","red","black"),legend=c("fry","fry-s","fry-p","roast"))
shiny::runApp('C:/Users/giner.g.WEHI/Dropbox/Rshiny/stockVis')
shiny::runApp('C:/Users/giner.g.WEHI/Dropbox/Rshiny/GST_Tool')
